{
  "_args": [
    [
      {
        "raw": "node-pty@https://registry.npmjs.org/node-pty/-/node-pty-0.7.3.tgz",
        "scope": null,
        "escapedName": "node-pty",
        "name": "node-pty",
        "rawSpec": "https://registry.npmjs.org/node-pty/-/node-pty-0.7.3.tgz",
        "spec": "https://registry.npmjs.org/node-pty/-/node-pty-0.7.3.tgz",
        "type": "remote"
      },
      "/vso/work/1/s"
    ]
  ],
  "_from": "node-pty@0.7.3",
  "_id": "node-pty@0.7.3",
  "_inCache": true,
  "_location": "/node-pty",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-pty@https://registry.npmjs.org/node-pty/-/node-pty-0.7.3.tgz",
    "scope": null,
    "escapedName": "node-pty",
    "name": "node-pty",
    "rawSpec": "https://registry.npmjs.org/node-pty/-/node-pty-0.7.3.tgz",
    "spec": "https://registry.npmjs.org/node-pty/-/node-pty-0.7.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-pty/-/node-pty-0.7.3.tgz",
  "_shasum": "4bb36a24a62ee9f3332e2e2310d6642d9daed1f7",
  "_shrinkwrap": null,
  "_spec": "node-pty@https://registry.npmjs.org/node-pty/-/node-pty-0.7.3.tgz",
  "_where": "/vso/work/1/s",
  "author": {
    "name": "Daniel Imms"
  },
  "bugs": {
    "url": "https://github.com/Tyriar/node-pty/issues"
  },
  "dependencies": {
    "nan": "^2.6.2"
  },
  "description": "Fork pseudoterminals in Node.JS",
  "devDependencies": {
    "@types/mocha": "^2.2.41",
    "@types/node": "^6.0.58",
    "cross-env": "^3.2.4",
    "mocha": "^3.1.2",
    "pollUntil": "^1.0.3",
    "tslint": "^4.3.1",
    "typescript": "^2.1.4"
  },
  "files": [
    "binding.gyp",
    "lib/",
    "scripts/",
    "src/",
    "deps/"
  ],
  "homepage": "https://github.com/Tyriar/node-pty",
  "keywords": [
    "pty",
    "tty",
    "terminal",
    "pseudoterminal",
    "forkpty",
    "openpty"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "node-pty",
  "optionalDependencies": {},
  "readme": "# node-pty\r\n\r\n[![Travis CI build status](https://travis-ci.org/Tyriar/node-pty.svg?branch=master)](https://travis-ci.org/Tyriar/node-pty)\r\n[![Appveyor build status](https://ci.appveyor.com/api/projects/status/1064dcr2t2r90q4n/branch/master?svg=true)](https://ci.appveyor.com/project/Tyriar/node-pty/branch/master)\r\n\r\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\r\n\r\nThis is useful for:\r\n\r\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\r\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\r\n\r\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [winpty](https://github.com/rprichard/winpty) library.\r\n\r\n## Real-world Uses\r\n\r\n`node-pty` powers many different terminal emulators, including:\r\n\r\n- [Microsoft Visual Studio Code](code.visualstudio.com)\r\n- [Hyper](https://hyper.is/)\r\n- [Upterm](https://github.com/railsware/upterm)\r\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\r\n- [Theia](https://github.com/theia-ide/theia)\r\n\r\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\r\n\r\n## Example Usage\r\n\r\n```js\r\nvar os = require('os');\r\nvar pty = require('node-pty');\r\n\r\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\r\n\r\nvar ptyProcess = pty.spawn(shell, [], {\r\n  name: 'xterm-color',\r\n  cols: 80,\r\n  rows: 30,\r\n  cwd: process.env.HOME,\r\n  env: process.env\r\n});\r\n\r\nptyProcess.on('data', function(data) {\r\n  console.log(data);\r\n});\r\n\r\nptyProcess.write('ls\\r');\r\nptyProcess.resize(100, 40);\r\nptyProcess.write('ls\\r');\r\n```\r\n\r\n## Building\r\n\r\n```bash\r\n# Install dependencies and build C++\r\nnpm install\r\n# Compile TypeScript -> JavaScript\r\nnpm run tsc\r\n```\r\n\r\n## Debugging\r\n\r\nOn Windows, you can show the winpty agent console window by adding the environment variable `WINPTY_SHOW_CONSOLE=1` to the pty's environment. See https://github.com/rprichard/winpty#debugging-winpty for more information.\r\n\r\n## Troubleshooting\r\n\r\n**Powershell gives error 8009001d**\r\n\r\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\r\n\r\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\r\n\r\n## pty.js\r\n\r\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).  \r\nCopyright (c) 2016, Daniel Imms (MIT License).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Tyriar/node-pty.git"
  },
  "scripts": {
    "install": "node scripts/install.js",
    "postinstall": "node scripts/post-install.js",
    "prepublish": "npm run tsc",
    "test": "cross-env NODE_ENV=test mocha -R spec lib/*.test.js",
    "tsc": "tsc",
    "tslint": "tslint src/**/*.ts"
  },
  "types": "./lib/index.d.ts",
  "version": "0.7.3"
}
